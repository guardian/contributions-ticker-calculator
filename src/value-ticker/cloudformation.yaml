AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Calculates total amount contributed during a campaign, for use by a ticker

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: support
  App:
    Description: Application name
    Type: String
    Default: contributions-ticker-calculator
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist
  AcquisitionEventsBucket:
    Description: Bucket containing the data to be queried
    Type: String
    Default: acquisition-events
  AthenaOutputBucket:
    Description: Name of the bucket to output athena query results to
    Type: String
    Default: acquisition-events-output
  TickerBucket:
    Description: Bucket to output the result to
    Type: String
    Default: contributions-ticker
  CronExpression:
    Description: Cron expression for scheduling the step functions
    Type: String
    Default: 0/15 * * * ? *
  ScheduleState:
    Description: The state of the schedule
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  SNSTopicForAlerts:
    Description: Name of the SNS topic for alerts
    Type: String

Conditions:
  IsProd: !Equals [!Ref "Stage", "PROD"]

Resources:

  QueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub contributions-ticker-query-lambda-${Stage}
      Description: Queries Athena for total amounts contributed during a campaign
      Runtime: nodejs18.x
      Handler: value-ticker/query-lambda/query-lambda.handler
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          Stage: !Ref Stage
          AthenaOutputBucket: !Ref AthenaOutputBucket
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonAthenaFullAccess
        - Statement:
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3::*:${AcquisitionEventsBucket}/*"
              - !Sub "arn:aws:s3::*:${AcquisitionEventsBucket}"
        - Statement:
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3::*:${AthenaOutputBucket}/*"
              - !Sub "arn:aws:s3::*:${AthenaOutputBucket}"
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
              - !Sub arn:aws:s3::*:membership-private/${Stage}/ticker.conf.json

  CalculateLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub contributions-ticker-calculate-lambda-${Stage}
      Description: Gets the results of the Athena queries and updates the public ticker file
      Runtime: nodejs18.x
      Handler: value-ticker/calculate-lambda/calculate-lambda.handler
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          Stage: !Ref Stage
          TickerBucket: !Ref TickerBucket
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonAthenaFullAccess
        - Statement:
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3::*:${AthenaOutputBucket}/*"
              - !Sub "arn:aws:s3::*:${AthenaOutputBucket}"
              - !Sub "arn:aws:s3::*:${TickerBucket}/*"
              - !Sub "arn:aws:s3::*:${TickerBucket}"
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
              - !Sub arn:aws:s3::*:membership-private/${Stage}/ticker.conf.json

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"

  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn:
      - QueryLambda
      - CalculateLambda
    Properties:
      StateMachineName:
        !Sub ${App}-${Stage}
      DefinitionString:
        !Sub
          - |
            {
              "Comment": "contributions-ticker-calculator",
              "StartAt": "Query",
              "States": {
                "Query": {
                  "Type": "Task",
                  "Resource": "${QueryLambdaArn}",
                  "Next": "Calculate"
                },
                "Calculate": {
                  "Type": "Task",
                  "Resource": "${CalculateLambdaArn}",
                  "End": true,
                  "Retry": [{
                    "ErrorEquals": ["QueryPendingError"],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5
                  }]
                }
              }
            }
          -
            QueryLambdaArn: !GetAtt QueryLambda.Arn
            CalculateLambdaArn: !GetAtt CalculateLambda.Arn
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  TriggerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: !Ref StateMachine

  ScheduleUS:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub contributions-ticker-calculator-schedule-US-${Stage}
      ScheduleExpression: !Sub cron(${CronExpression})
      State: !Ref ScheduleState
      Targets:
        - Arn: !Ref StateMachine
          RoleArn: !GetAtt TriggerExecutionRole.Arn
          Id: !GetAtt StateMachine.Name
          Input: '{ "Name": "US" }'
  ScheduleAU:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub contributions-ticker-calculator-schedule-AU-${Stage}
      ScheduleExpression: !Sub cron(${CronExpression})
      State: !Ref ScheduleState
      Targets:
        - Arn: !Ref StateMachine
          RoleArn: !GetAtt TriggerExecutionRole.Arn
          Id: !GetAtt StateMachine.Name
          Input: '{ "Name": "AU" }'

  ExecutionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicForAlerts}
      AlarmName: !Sub ${App}-failed-${Stage}
      AlarmDescription: !Sub Ticker calculation failed twice in 30mins for stage ${Stage}
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 2
      Period: 900
      EvaluationPeriods: 2
      Statistic: Sum

